group = "jp.kyoheig3.ai_edge"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "2.1.0"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.9.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "jp.kyoheig3.ai_edge"

    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_21
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 24
    }

    dependencies {
        def flutterPath = "which flutter".execute().text.trim()
        if (flutterPath) {
            def flutter_root = new File(flutterPath).parentFile.parent

            if (flutter_root != null) {
                compileOnly files("$flutter_root/bin/cache/artifacts/engine/android-arm/flutter.jar")
                compileOnly files("$flutter_root/bin/cache/artifacts/engine/android-arm64/flutter.jar")
                compileOnly files("$flutter_root/bin/cache/artifacts/engine/android-x64/flutter.jar")
                testImplementation files("$flutter_root/bin/cache/artifacts/engine/android-arm/flutter.jar")
            }
        }
        
        implementation("com.google.mediapipe:tasks-genai:0.10.24")
        implementation("com.google.mediapipe:tasks-vision-image-generator:0.10.21")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
