name: Integration Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# Model configuration is defined in scripts/download_test_model.sh

jobs:
  test-ios:
    runs-on: macos-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Setup Mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true

      - name: Get model info from script
        id: get-model-info
        run: |
          FILE=$(grep "^MODEL_FILE=" scripts/download_test_model.sh | cut -d'"' -f2)
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "Model File: $FILE"
          # Use file size as part of cache key since we don't have SHA256 yet
          echo "cache_key=gemma-3n-e2b-3.14gb-v1" >> $GITHUB_OUTPUT

      - name: Cache Model File
        id: cache-model
        uses: actions/cache@v4
        with:
          path: ~/models/${{ steps.get-model-info.outputs.file }}
          key: model-${{ steps.get-model-info.outputs.cache_key }}

      - name: Setup Python for model download
        if: steps.cache-model.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install huggingface-hub
        if: steps.cache-model.outputs.cache-hit != 'true'
        run: pip install huggingface-hub
      
      - name: Download Model if not cached
        if: steps.cache-model.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Use the download script with Python/huggingface-hub
          # HF_TOKEN must be set as a GitHub secret with access to the Gemma model
          ./scripts/download_test_model.sh ~/models

      - name: Start iOS Simulator
        run: |
          # List available devices
          xcrun simctl list devices

          # Try to find an existing iPhone 16 Pro, or use the first available iPhone
          DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 16 Pro" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          
          # If no iPhone 16 Pro, try iPhone 15 Pro
          if [ -z "$DEVICE_ID" ]; then
            DEVICE_ID=$(xcrun simctl list devices | grep "iPhone 15 Pro" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          fi
          
          # If still no device, use any available iPhone
          if [ -z "$DEVICE_ID" ]; then
            DEVICE_ID=$(xcrun simctl list devices | grep "iPhone" | grep -v "unavailable" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}' | head -1)
          fi
          
          if [ -z "$DEVICE_ID" ]; then
            echo "No suitable iPhone simulator found. Available devices:"
            xcrun simctl list devices
            exit 1
          fi

          echo "Device ID: $DEVICE_ID"
          xcrun simctl boot $DEVICE_ID || true

          # Wait for simulator to be ready
          xcrun simctl bootstatus $DEVICE_ID

      - name: Copy Model to Simulator
        id: get-device
        run: |
          # Get the booted device ID
          DEVICE_ID=$(xcrun simctl list devices | grep "Booted" | head -1 | grep -oE '[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}')

          # Create app data directory structure (will be created when app runs)
          # For now, we'll copy after the app starts
          echo "Model will be copied during test setup"
          echo "device_id=$DEVICE_ID" >> $GITHUB_OUTPUT

      - name: Install Dependencies
        run: |
          cd example
          flutter pub get

      - name: Run Integration Tests
        run: |
          cd example

          # Set environment variable for model path
          export TEST_MODEL_PATH=~/models/${{ steps.get-model-info.outputs.file }}

          # Run integration tests
          flutter test integration_test \
            --timeout 30m \
            --device-id=${{ steps.get-device.outputs.device_id }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results
          path: example/test_results/

  test-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      matrix:
        api-level: [33]
        arch: [x86_64]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true

      - name: Get model info from script
        id: get-model-info
        run: |
          FILE=$(grep "^MODEL_FILE=" scripts/download_test_model.sh | cut -d'"' -f2)
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "Model File: $FILE"
          # Use file size as part of cache key since we don't have SHA256 yet
          echo "cache_key=gemma-3n-e2b-3.14gb-v1" >> $GITHUB_OUTPUT

      - name: Cache Model File
        id: cache-model
        uses: actions/cache@v4
        with:
          path: ~/models/${{ steps.get-model-info.outputs.file }}
          key: model-${{ steps.get-model-info.outputs.cache_key }}

      - name: Setup Python for model download
        if: steps.cache-model.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install huggingface-hub
        if: steps.cache-model.outputs.cache-hit != 'true'
        run: pip install huggingface-hub
      
      - name: Download Model if not cached
        if: steps.cache-model.outputs.cache-hit != 'true'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Use the download script with Python/huggingface-hub
          # HF_TOKEN must be set as a GitHub secret with access to the Gemma model
          ./scripts/download_test_model.sh ~/models

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.arch }}

      - name: Free up disk space
        run: |
          # Free up disk space on Ubuntu runner
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 2048 -partition-size 4096
          disable-animations: false
          disk-size: 8192M
          script: echo "Generated AVD snapshot for caching."

      - name: Install Dependencies
        run: |
          cd example
          flutter pub get

      - name: Run Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -memory 2048 -partition-size 4096
          disable-animations: true
          disk-size: 8192M
          script: |
            # Wait for emulator to be ready
            adb wait-for-device
            adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'

            # Use a temporary location first (public storage)
            adb shell mkdir -p /sdcard/Download/
            
            # Push model to public location first
            echo "Pushing model to emulator..."
            adb push ~/models/${{ steps.get-model-info.outputs.file }} /sdcard/Download/
            
            # Verify model was copied
            adb shell ls -la /sdcard/Download/${{ steps.get-model-info.outputs.file }}

            # Build and install the app first (this creates the app directory)
            # Use && to chain commands in same shell
            cd ${{ github.workspace }}/example && pwd && ls -la && flutter build apk --debug && adb install -r build/app/outputs/flutter-apk/app-debug.apk
            
            # Give the app storage permissions
            adb shell pm grant jp.kyoheig3.ai_edge_example android.permission.READ_EXTERNAL_STORAGE || true
            adb shell pm grant jp.kyoheig3.ai_edge_example android.permission.WRITE_EXTERNAL_STORAGE || true
            
            # Now move the model to app directory (alternative: keep in Download)
            adb shell mkdir -p /sdcard/Android/data/jp.kyoheig3.ai_edge_example/files/
            adb shell cp /sdcard/Download/${{ steps.get-model-info.outputs.file }} /sdcard/Android/data/jp.kyoheig3.ai_edge_example/files/ || true
            
            # Run integration tests with model in Download folder (more reliable)
            cd ${{ github.workspace }}/example && export TEST_MODEL_PATH=/sdcard/Download/${{ steps.get-model-info.outputs.file }} && flutter test integration_test --timeout 30m

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-results-${{ matrix.api-level }}
          path: example/test_results/
